# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './PyQt5/1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import Database as db
from mainUI import Ui_MainWindow
import pyqtgraph as pg


def myFormat(string):
        from itertools import zip_longest
        return (','.join(map("".join, zip_longest( *[iter(str(string)[::-1])] * 3, fillvalue=''))))[::-1]

def strange_strings(s):
        d1 = s.find("qconicalgradient")
        d2 = d1 + 1 +s[d1:].find(";")
        return (s[:d1], s[d2:])



class Ui_MainWindow1(Ui_MainWindow):
    def retranslateUi(self, MainWindow):
        x = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        y = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        xdict = dict(enumerate(x))
        stringaxis = pg.AxisItem(orientation='bottom')
        stringaxis.setTicks([xdict.items()])
        self.view = view = pg.PlotWidget(self.widget, axisItems={'bottom': stringaxis})

        self.curve = view.plot(list(xdict.keys()), y)
        # self.layout = QVBoxLayout(self)
        view.setGeometry(QtCore.QRect(0, 460, 480, 200))
        # view.setStyleSheet("""
        #     min-height:400px
        # """)
        Ui_MainWindow.retranslateUi(self, MainWindow)
        self.pushButton.clicked.connect(self.Update)
        self.pushButton_2.clicked.connect(self.Update)
        self.pushButton_5.clicked.connect(self.Update)
        self.pushButton_6.clicked.connect(self.Update)
        self.pushButton_7.clicked.connect(self.Update)
        self.pushButton.clicked.emit()


    def Update(self):
        from itertools import zip_longest
        year = int(MainWindow.sender().text())
        income1 = int(db.selectSum(connect, "target_i", ('year',), year=year))
        income2 = int(db.selectSum(connect, "income", ('year',),year=year))
        self.Finential_statistic1.setText(myFormat(income1))
        self.Finential_statistic2.setText(myFormat(income2))
        tmp = []
        for month in ("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"):
            tmp += [db.selectSum(connect, 'income', ('month',), month=month, year=year)]
        self.curve.setData(tmp, symbol='o',  pen='b')

        self.Finential_statistic1_2.setText(str(int(
                income2 * 100 //
                income1
        )))
        for place_name, value_in_table in zip(("Licencing", "Usage_fees", "Licencing_2", "Subscription", "Advertising", "Asset_sale"),
                                              ("Licensing", "Usage fees", "Renting",     "Subscription", "Advertising", "Asset sale")):
            eval(f"self.{place_name}.setText(myFormat(int(db.selectSum(connect, 'income', ('year', 'income_s'), year=year, income_s='{value_in_table}'))))")

        for place_name, value_in_table in zip(("Finential_statistic1_73", "Finential_statistic1_51", "Finential_statistic1_40", "Finential_statistic1_26", "Finential_statistic1_4"),
                                              ("Licensing",                "Usage fees",             "Renting",                 "Subscription",            "Advertising")):
            eval(f"self.{place_name}.setText(myFormat(int(db.selectSum(connect, 'income', ('year', 'income_s'), year=year, income_s='{value_in_table}')*100/income2)))")

        from itertools import product
        for place_name, value_in_table  in zip(("Finential_statistic1_106", "Finential_statistic1_104",
                                               "Finential_statistic1_100", "Finential_statistic1_98",
                                               "Finential_statistic1_96", "Finential_statistic1_94",
                                                "Finential_statistic1_92", "Finential_statistic1_33",
                                                "Finential_statistic1_29", "Finential_statistic1_90",
                                                "Finential_statistic1_88", "Finential_statistic1_86",
                                                "Finential_statistic1_82", "Finential_statistic1_20", ),
                                              (("Licensing", "Floating License"), ("Licensing", "Software Metered License"),
                                               ("Usage fees", "New "), ("Usage fees", "Renewal"),
                                               ("Renting", "Offices"), ("Renting", "Lands"),
                                               ("Renting", "Equipments"), ("Subscription", "Prime"),
                                               ("Subscription", "Premium"), ("Advertising", "Television Ad"),
                                               ("Advertising", "Company Website"),  ("Advertising", "Facebook Page"),
                                               ("Advertising", "Google Ad"),  ("Advertising", "Youtube Channel")) ):
                eval(f"self.{place_name}.setText(myFormat(int(db.selectSum(connect, 'income', ('year', 'income_s', 'income_b'), year=year, income_s='{value_in_table[0]}', income_b='{value_in_table[1]}')*100/income2)))")

        for place_name, value_in_table  in zip(("Finential_statistic1_109", "Finential_statistic1_81",
                                               "Finential_statistic1_38", "Finential_statistic1_37",
                                               "Finential_statistic1_25", "Finential_statistic1_24",
                                                "Finential_statistic1_17", "Finential_statistic1_35",
                                                "Finential_statistic1_32", "Finential_statistic1_23",
                                                "Finential_statistic1_9", "Finential_statistic1_10",
                                                "Finential_statistic1_14", "Finential_statistic1_18", ),
                                              (("Licensing", "Floating License"), ("Licensing", "Software Metered License"),
                                               ("Usage fees", "New "), ("Usage fees", "Renewal"),
                                               ("Renting", "Offices"), ("Renting", "Lands"),
                                               ("Renting", "Equipments"), ("Subscription", "Prime"),
                                               ("Subscription", "Premium"), ("Advertising", "Television Ad"),
                                               ("Advertising", "Company Website"),  ("Advertising", "Facebook Page"),
                                               ("Advertising", "Google Ad"),  ("Advertising", "Youtube Channel")) ):
                eval(f"self.{place_name}.setText(myFormat(int(db.selectSum(connect, 'income', ('year', 'income_s', 'income_b'), year=year, income_s='{value_in_table[0]}', income_b='{value_in_table[1]}'))))")

        self.Advertising_2.setText(myFormat(int(db.selectAVG(connect, 'income', ('month', ), year=year))))

        self.Advertising_22.setText(myFormat(int(db.selectSum(connect, 'income', ('mark_strategies',), mark_strategies='B2B', year=year))))
        self.Advertising_23.setText(str(float("{0:.2f}".format(db.selectSum(connect, 'income', ('mark_strategies',), mark_strategies='B2B', year=year) * 100 / income2))))

        self.Advertising_27.setText(myFormat(int(db.selectSum(connect, 'income', ('mark_strategies',), mark_strategies='B2C', year=year))))
        self.Advertising_25.setText(str(float("{0:.2f}".format(db.selectSum(connect, 'income', ('mark_strategies',), mark_strategies='B2C', year=year) * 100 / income2))))

        op_profits = int(db.selectSum(connect, 'op_profit', ('year',), year=year ))
        for month, place_name in zip(("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
                                     ("progressBar_12", "progressBar_11", "progressBar_6", "progressBar_8",
                                      "progressBar_7", "progressBar_10", "progressBar_9", "progressBar_5",
                                      "progressBar_4", "progressBar_3", "progressBar_2", "progressBar")):
                eval(f"self.{place_name}.setValue(min(99, int(db.selectSum(connect, 'op_profit', ('month',), year=year, month='{month}') * 600 / op_profits)))")

        tmp = float('{0:.3f}'.format(db.selectSum(connect, 'op_profit', ('mark_strategies',), mark_strategies='B2B', year=year) / op_profits))
        self.frame_26.setStyleSheet(f"""background-color: qconicalgradient(cx:0.5, cy:0.5, angle:180, 
                                                        stop:{0.999 - tmp} rgba(0, 184, 200, 255),
                                                        stop:{1 - tmp} rgba(0, 34, 255, 255));
                                        border-radius:50px;
                                """)

        tmp = min(0.998, float('{0:.3f}'.format(income2  / income1)))
        self.frame_2.setStyleSheet(f"""
        QFrame{'{'}
                border-radius:190px;
                background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, 
                stop:{0.999 - tmp} rgba(85, 0, 255, 0), 
                stop:{1 - tmp} rgb(68, 0, 68));
                {'}'}
        """)

        tmp = [0, '']
        for name_widget, value_in_table in zip(("widget_5", "widget_6", "widget_7", "widget_10", "widget_9", "widget_8"),
                        ('Asset sale', 'Advertising', 'Subscription', 'Renting', 'Usage fees', 'Licensing')):
                if tmp[0] < db.selectSum(connect, 'income', ('year', 'income_s'), year=year, income_s=value_in_table):
                        tmp = [db.selectSum(connect, 'income', ('year', 'income_s'), year=year, income_s=value_in_table), name_widget]
        for w in ("widget_5", "widget_6", "widget_7", "widget_10", "widget_9", "widget_8"):
                style1 = "qconicalgradient(cx:0.5, cy:0.5, angle:0, stop:0.188383 rgba(111, 0, 148, 255), stop:0.333922 rgba(163, 61, 188, 255), stop:0.529042 rgba(168, 65, 208, 255), stop:0.694346 rgba(134, 59, 188, 255), stop:0.841444 rgba(91, 0, 144, 255));"
                style2 ="qconicalgradient(cx:0.5, cy:0.5, angle:0, stop:0.0893471 rgba(185, 6, 255, 255), stop:0.278351 rgba(200, 2, 174, 255), stop:0.5189 rgba(200, 3, 164, 255), stop:0.704467 rgba(200, 2, 180, 255), stop:0.90378 rgba(185, 6, 255, 255));"
                eval(f"self.{w}.setStyleSheet('{style1 if w != tmp[1] else style2}'.join(strange_strings(str(self.{w}.styleSheet()))))")





if __name__ == "__main__":
    import sys

    connect = db.getConnect()
    db.init(connect)
    db.Update(connect)


    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow1()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
